# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type Activity {
  id: ID!
  title: String
  featureImage: ImageFieldOutput
  activityItemHeading(where: ActivityItemHeadingWhereInput! = {}, orderBy: [ActivityItemHeadingOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActivityItemHeading!]
  activityItemHeadingCount(where: ActivityItemHeadingWhereInput! = {}): Int
  tag: Tag
  faq(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0): [Faq!]
  faqCount(where: FaqWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ActivityWhereUniqueInput {
  id: ID
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: IDFilter
  title: StringFilter
  activityItemHeading: ActivityItemHeadingManyRelationFilter
  tag: TagWhereInput
  faq: FaqManyRelationFilter
}

input ActivityItemHeadingManyRelationFilter {
  every: ActivityItemHeadingWhereInput
  some: ActivityItemHeadingWhereInput
  none: ActivityItemHeadingWhereInput
}

input FaqManyRelationFilter {
  every: FaqWhereInput
  some: FaqWhereInput
  none: FaqWhereInput
}

input ActivityOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ActivityUpdateInput {
  title: String
  featureImage: ImageFieldInput
  activityItemHeading: ActivityItemHeadingRelateToManyForUpdateInput
  tag: TagRelateToOneForUpdateInput
  faq: FaqRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ActivityItemHeadingRelateToManyForUpdateInput {
  disconnect: [ActivityItemHeadingWhereUniqueInput!]
  set: [ActivityItemHeadingWhereUniqueInput!]
  create: [ActivityItemHeadingCreateInput!]
  connect: [ActivityItemHeadingWhereUniqueInput!]
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input FaqRelateToManyForUpdateInput {
  disconnect: [FaqWhereUniqueInput!]
  set: [FaqWhereUniqueInput!]
  create: [FaqCreateInput!]
  connect: [FaqWhereUniqueInput!]
}

input ActivityUpdateArgs {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateInput!
}

input ActivityCreateInput {
  title: String
  featureImage: ImageFieldInput
  activityItemHeading: ActivityItemHeadingRelateToManyForCreateInput
  tag: TagRelateToOneForCreateInput
  faq: FaqRelateToManyForCreateInput
}

input ActivityItemHeadingRelateToManyForCreateInput {
  create: [ActivityItemHeadingCreateInput!]
  connect: [ActivityItemHeadingWhereUniqueInput!]
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

input FaqRelateToManyForCreateInput {
  create: [FaqCreateInput!]
  connect: [FaqWhereUniqueInput!]
}

type ActivityItemHeading {
  id: ID!
  title: String
  activityItems(where: ActivityItemWhereInput! = {}, orderBy: [ActivityItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActivityItem!]
  activityItemsCount(where: ActivityItemWhereInput! = {}): Int
}

input ActivityItemHeadingWhereUniqueInput {
  id: ID
}

input ActivityItemHeadingWhereInput {
  AND: [ActivityItemHeadingWhereInput!]
  OR: [ActivityItemHeadingWhereInput!]
  NOT: [ActivityItemHeadingWhereInput!]
  id: IDFilter
  title: StringFilter
  activityItems: ActivityItemManyRelationFilter
}

input ActivityItemManyRelationFilter {
  every: ActivityItemWhereInput
  some: ActivityItemWhereInput
  none: ActivityItemWhereInput
}

input ActivityItemHeadingOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ActivityItemHeadingUpdateInput {
  title: String
  activityItems: ActivityItemRelateToManyForUpdateInput
}

input ActivityItemRelateToManyForUpdateInput {
  disconnect: [ActivityItemWhereUniqueInput!]
  set: [ActivityItemWhereUniqueInput!]
  create: [ActivityItemCreateInput!]
  connect: [ActivityItemWhereUniqueInput!]
}

input ActivityItemHeadingUpdateArgs {
  where: ActivityItemHeadingWhereUniqueInput!
  data: ActivityItemHeadingUpdateInput!
}

input ActivityItemHeadingCreateInput {
  title: String
  activityItems: ActivityItemRelateToManyForCreateInput
}

input ActivityItemRelateToManyForCreateInput {
  create: [ActivityItemCreateInput!]
  connect: [ActivityItemWhereUniqueInput!]
}

type ActivityItem {
  id: ID!
  title: String
  content: ActivityItem_content_Document
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  price: String
  duration: String
}

type ActivityItem_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ActivityItemWhereUniqueInput {
  id: ID
}

input ActivityItemWhereInput {
  AND: [ActivityItemWhereInput!]
  OR: [ActivityItemWhereInput!]
  NOT: [ActivityItemWhereInput!]
  id: IDFilter
  title: StringFilter
  images: ImageManyRelationFilter
  price: StringFilter
  duration: StringFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ActivityItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  price: OrderDirection
  duration: OrderDirection
}

input ActivityItemUpdateInput {
  title: String
  content: JSON
  images: ImageRelateToManyForUpdateInput
  price: String
  duration: String
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ActivityItemUpdateArgs {
  where: ActivityItemWhereUniqueInput!
  data: ActivityItemUpdateInput!
}

input ActivityItemCreateInput {
  title: String
  content: JSON
  images: ImageRelateToManyForCreateInput
  price: String
  duration: String
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Image {
  id: ID!
  name: String
  altText: String
  image: ImageFieldOutput
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

type Home {
  id: ID!
  title: String
  featureImage: ImageFieldOutput
  homeTours(where: HomeTourWhereInput! = {}, orderBy: [HomeTourOrderByInput!]! = [], take: Int, skip: Int! = 0): [HomeTour!]
  homeToursCount(where: HomeTourWhereInput! = {}): Int
}

input HomeWhereUniqueInput {
  id: ID
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  title: StringFilter
  homeTours: HomeTourManyRelationFilter
}

input HomeTourManyRelationFilter {
  every: HomeTourWhereInput
  some: HomeTourWhereInput
  none: HomeTourWhereInput
}

input HomeOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input HomeUpdateInput {
  title: String
  featureImage: ImageFieldInput
  homeTours: HomeTourRelateToManyForUpdateInput
}

input HomeTourRelateToManyForUpdateInput {
  disconnect: [HomeTourWhereUniqueInput!]
  set: [HomeTourWhereUniqueInput!]
  create: [HomeTourCreateInput!]
  connect: [HomeTourWhereUniqueInput!]
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput! = {id: 1}
  data: HomeUpdateInput!
}

input HomeCreateInput {
  title: String
  featureImage: ImageFieldInput
  homeTours: HomeTourRelateToManyForCreateInput
}

input HomeTourRelateToManyForCreateInput {
  create: [HomeTourCreateInput!]
  connect: [HomeTourWhereUniqueInput!]
}

type HomeTour {
  id: ID!
  image: ImageFieldOutput
  duration: String
  price: String
  title: String
  content: HomeTour_content_Document
}

type HomeTour_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HomeTourWhereUniqueInput {
  id: ID
}

input HomeTourWhereInput {
  AND: [HomeTourWhereInput!]
  OR: [HomeTourWhereInput!]
  NOT: [HomeTourWhereInput!]
  id: IDFilter
  duration: StringFilter
  price: StringFilter
  title: StringFilter
}

input HomeTourOrderByInput {
  id: OrderDirection
  duration: OrderDirection
  price: OrderDirection
  title: OrderDirection
}

input HomeTourUpdateInput {
  image: ImageFieldInput
  duration: String
  price: String
  title: String
  content: JSON
}

input HomeTourUpdateArgs {
  where: HomeTourWhereUniqueInput!
  data: HomeTourUpdateInput!
}

input HomeTourCreateInput {
  image: ImageFieldInput
  duration: String
  price: String
  title: String
  content: JSON
}

type About {
  id: ID!
  title: String
  featureImage: ImageFieldOutput
  content: About_content_Document
  guides(where: GuideWhereInput! = {}, orderBy: [GuideOrderByInput!]! = [], take: Int, skip: Int! = 0): [Guide!]
  guidesCount(where: GuideWhereInput! = {}): Int
  affiliations(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  affiliationsCount(where: ImageWhereInput! = {}): Int
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  title: StringFilter
  guides: GuideManyRelationFilter
  affiliations: ImageManyRelationFilter
}

input GuideManyRelationFilter {
  every: GuideWhereInput
  some: GuideWhereInput
  none: GuideWhereInput
}

input AboutOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input AboutUpdateInput {
  title: String
  featureImage: ImageFieldInput
  content: JSON
  guides: GuideRelateToManyForUpdateInput
  affiliations: ImageRelateToManyForUpdateInput
}

input GuideRelateToManyForUpdateInput {
  disconnect: [GuideWhereUniqueInput!]
  set: [GuideWhereUniqueInput!]
  create: [GuideCreateInput!]
  connect: [GuideWhereUniqueInput!]
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput! = {id: 1}
  data: AboutUpdateInput!
}

input AboutCreateInput {
  title: String
  featureImage: ImageFieldInput
  content: JSON
  guides: GuideRelateToManyForCreateInput
  affiliations: ImageRelateToManyForCreateInput
}

input GuideRelateToManyForCreateInput {
  create: [GuideCreateInput!]
  connect: [GuideWhereUniqueInput!]
}

type Guide {
  id: ID!
  name: String
  title: String
  altText: String
  image: ImageFieldOutput
  description: String
}

input GuideWhereUniqueInput {
  id: ID
}

input GuideWhereInput {
  AND: [GuideWhereInput!]
  OR: [GuideWhereInput!]
  NOT: [GuideWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  altText: StringFilter
  description: StringFilter
}

input GuideOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  altText: OrderDirection
  description: OrderDirection
}

input GuideUpdateInput {
  name: String
  title: String
  altText: String
  image: ImageFieldInput
  description: String
}

input GuideUpdateArgs {
  where: GuideWhereUniqueInput!
  data: GuideUpdateInput!
}

input GuideCreateInput {
  name: String
  title: String
  altText: String
  image: ImageFieldInput
  description: String
}

type Faq {
  id: ID!
  question: String
  answer: String
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
}

input FaqOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
}

input FaqUpdateInput {
  question: String
  answer: String
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  question: String
  answer: String
}

type Tag {
  id: ID!
  name: String
  activity: Activity
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  activity: ActivityWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  activity: ActivityRelateToOneForUpdateInput
}

input ActivityRelateToOneForUpdateInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
  disconnect: Boolean
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  activity: ActivityRelateToOneForCreateInput
}

input ActivityRelateToOneForCreateInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createActivity(data: ActivityCreateInput!): Activity
  createActivities(data: [ActivityCreateInput!]!): [Activity]
  updateActivity(where: ActivityWhereUniqueInput!, data: ActivityUpdateInput!): Activity
  updateActivities(data: [ActivityUpdateArgs!]!): [Activity]
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteActivities(where: [ActivityWhereUniqueInput!]!): [Activity]
  createActivityItemHeading(data: ActivityItemHeadingCreateInput!): ActivityItemHeading
  createActivityItemHeadings(data: [ActivityItemHeadingCreateInput!]!): [ActivityItemHeading]
  updateActivityItemHeading(where: ActivityItemHeadingWhereUniqueInput!, data: ActivityItemHeadingUpdateInput!): ActivityItemHeading
  updateActivityItemHeadings(data: [ActivityItemHeadingUpdateArgs!]!): [ActivityItemHeading]
  deleteActivityItemHeading(where: ActivityItemHeadingWhereUniqueInput!): ActivityItemHeading
  deleteActivityItemHeadings(where: [ActivityItemHeadingWhereUniqueInput!]!): [ActivityItemHeading]
  createActivityItem(data: ActivityItemCreateInput!): ActivityItem
  createActivityItems(data: [ActivityItemCreateInput!]!): [ActivityItem]
  updateActivityItem(where: ActivityItemWhereUniqueInput!, data: ActivityItemUpdateInput!): ActivityItem
  updateActivityItems(data: [ActivityItemUpdateArgs!]!): [ActivityItem]
  deleteActivityItem(where: ActivityItemWhereUniqueInput!): ActivityItem
  deleteActivityItems(where: [ActivityItemWhereUniqueInput!]!): [ActivityItem]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createHome(data: HomeCreateInput!): Home
  createHomes(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput! = {id: 1}, data: HomeUpdateInput!): Home
  updateHomes(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput! = {id: 1}): Home
  deleteHomes(where: [HomeWhereUniqueInput!]!): [Home]
  createHomeTour(data: HomeTourCreateInput!): HomeTour
  createHomeTours(data: [HomeTourCreateInput!]!): [HomeTour]
  updateHomeTour(where: HomeTourWhereUniqueInput!, data: HomeTourUpdateInput!): HomeTour
  updateHomeTours(data: [HomeTourUpdateArgs!]!): [HomeTour]
  deleteHomeTour(where: HomeTourWhereUniqueInput!): HomeTour
  deleteHomeTours(where: [HomeTourWhereUniqueInput!]!): [HomeTour]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput! = {id: 1}, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput! = {id: 1}): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createGuide(data: GuideCreateInput!): Guide
  createGuides(data: [GuideCreateInput!]!): [Guide]
  updateGuide(where: GuideWhereUniqueInput!, data: GuideUpdateInput!): Guide
  updateGuides(data: [GuideUpdateArgs!]!): [Guide]
  deleteGuide(where: GuideWhereUniqueInput!): Guide
  deleteGuides(where: [GuideWhereUniqueInput!]!): [Guide]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  activities(where: ActivityWhereInput! = {}, orderBy: [ActivityOrderByInput!]! = [], take: Int, skip: Int! = 0): [Activity!]
  activity(where: ActivityWhereUniqueInput!): Activity
  activitiesCount(where: ActivityWhereInput! = {}): Int
  activityItemHeadings(where: ActivityItemHeadingWhereInput! = {}, orderBy: [ActivityItemHeadingOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActivityItemHeading!]
  activityItemHeading(where: ActivityItemHeadingWhereUniqueInput!): ActivityItemHeading
  activityItemHeadingsCount(where: ActivityItemHeadingWhereInput! = {}): Int
  activityItems(where: ActivityItemWhereInput! = {}, orderBy: [ActivityItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActivityItem!]
  activityItem(where: ActivityItemWhereUniqueInput!): ActivityItem
  activityItemsCount(where: ActivityItemWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  homes(where: HomeWhereInput! = {id: {equals: 1}}, orderBy: [HomeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Home!]
  home(where: HomeWhereUniqueInput! = {id: 1}): Home
  homesCount(where: HomeWhereInput! = {id: {equals: 1}}): Int
  homeTours(where: HomeTourWhereInput! = {}, orderBy: [HomeTourOrderByInput!]! = [], take: Int, skip: Int! = 0): [HomeTour!]
  homeTour(where: HomeTourWhereUniqueInput!): HomeTour
  homeToursCount(where: HomeTourWhereInput! = {}): Int
  abouts(where: AboutWhereInput! = {id: {equals: 1}}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0): [About!]
  about(where: AboutWhereUniqueInput! = {id: 1}): About
  aboutsCount(where: AboutWhereInput! = {id: {equals: 1}}): Int
  guides(where: GuideWhereInput! = {}, orderBy: [GuideOrderByInput!]! = [], take: Int, skip: Int! = 0): [Guide!]
  guide(where: GuideWhereUniqueInput!): Guide
  guidesCount(where: GuideWhereInput! = {}): Int
  faqs(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
